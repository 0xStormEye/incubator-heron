# Copyright 2016 Twitter. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
'''response.py'''
import sys

from heron.common.src.python.utils.log import Log

# Meaning of exit status code:
#  - status code = 0:
#    program exits without error
#  - 0 < status code < 100:
#    program fails to execute before program execution. For example,
#    JVM cannot find or load main class
#  - 100 <= status code < 200:
#    program fails to launch after program execution. For example,
#    topology definition file fails to be loaded
#  - status code == 200:
#    program sends out dry-run response

# Definition corresponds to definition in com.twitter.heron.scheduler.AbstractMain

# pylint: disable=no-init
class Status(object):
  """Status code enum"""
  Ok = 0
  InvocationError = 1
  HeronError = 100
  DryRun = 200

def status_type(status_code):
  if status_code == 0:
    return Status.Ok
  elif status_code < 100:
    return Status.InvocationError
  elif status_code == 200:
    return Status.DryRun
  else:
    return Status.HeronError

class Response(object):
  """Response class that captures result of executing an action

     If the response object is generated by a statement that
     shells out program, `msg` is stdout, `detailed_msg` is stderr
  """
  def __init__(self, proc=None, status=None):
    # invariant: only one of proc and status is None
    self.proc = proc
    self.status = status
    self.err_context = None
    self.succ_context = None

  def add_context(self, err_context, succ_context=None):
    """ Prepend msg to add some context information

    :param pmsg: context info
    :return: None
    """
    self.err_context = err_context
    self.succ_context = succ_context

def do_log(log, msg):
  if msg:
    log(msg)

def log_context(resp):
  status = resp.status
  if status == Status.Ok or status == Status.DryRun:
    do_log(Log.info, resp.succ_context)
  elif status == Status.HeronError:
    do_log(Log.error, resp.err_context)
  elif status == Status.InvocationError:
    pass
  else:
    raise RuntimeError("Unknown status type of value %d", status)

# # pylint: disable=too-many-branches,unreachable
def render(resp):
  """ Render output of the process until it exits

  :param resp: Response
  :return:
  """
  if isinstance(resp, list):
    for r in resp:
      render(r)
  elif isinstance(resp, Response):
    if resp.proc:
      proc = resp.proc
      # use while loop here because of a bug of Python2.7
      while True:
        stderr_line = proc.stderr.readline()
        if not stderr_line:
          if proc.poll() is None:
            continue
          stdout_line = proc.stdout.readline()
          if not stdout_line:
            if proc.poll() is None:
              continue
            else:
              break
          else:
            print >> sys.stdout, stdout_line[:-1]
        else:
          print >> sys.stderr, stderr_line[:-1]
      proc.wait()
      resp.status = status_type(proc.returncode)
    else:
      assert resp.status is not None, "Unexpected break of invariant"
    log_context(resp)
  else:
    raise RuntimeError("Unknown response instance: %s", str(resp.__class__))

# check if all responses are successful
def isAllSuccessful(resps):
  if isinstance(resps, list):
    return all([resp.status == Status.Ok for resp in resps])
  elif isinstance(resps, Response):
    return resps.status == Status.Ok
  else:
    raise RuntimeError("Unknown response instance: %s", str(resps.__class__))
