""" Launch the topology as a single aurora job with multiple instances.
The heron executor will be responsible for invoking either a tmaster(for shard 0)
or a regular stmgr/metricsmgr/instances.
"""

heron_system_install = Packer.install(
    '{{HERON_PACKAGE}}', role = '{{RELEASE_ROLE}}', version = '{{VERSION}}')
userjar_install = Packer.install(
    '{{TOPOLOGY_PKG}}', role = '{{RUN_ROLE}}', version='live')

heron_executor_process = Process(
    name = 'heron-executor',
    cmdline = './{{HERON_EXECUTOR_BINARY}} {{mesos.instance}} {{TOPOLOGY_NAME}} {{TOPOLOGY_ID}} {{TOPOLOGY_DEFN}} {{INSTANCE_DISTRIBUTION}} {{ZK_NODE}} {{ZK_ROOT}} {{TMASTER_BINARY}} {{STMGR_BINARY}} "{{METRICS_MGR_CLASSPATH}}" {{INSTANCE_JVM_OPTS_IN_BASE64}} {{CLASSPATH}} {{thermos.ports[port1]}} {{thermos.ports[port2]}} {{thermos.ports[port3]}} {{HERON_INTERNALS_CONFIG_FILENAME}} {{COMPONENT_RAMMAP}} {{COMPONENT_JVM_OPTS_IN_BASE64}} {{PKG_TYPE}} {{TOPOLOGY_JAR_FILE}} {{HERON_JAVA_HOME}} {{thermos.ports[http]}} {{LOG_DIR}} {{SHELL_BINARY}} {{thermos.ports[port4]}}',
        max_failures = 1)

instance_task = Task(
    name = "HeronAuroraInstance",
    resources = Resources(cpu = '{{CPUS_PER_CONTAINER}}', ram = '{{RAM_PER_CONTAINER}}', disk = '{{DISK_PER_CONTAINER}}'),
    processes = [heron_system_install, userjar_install, heron_executor_process],
    constraints = order(heron_system_install, userjar_install, heron_executor_process)
)

jobs = [
  Job(name = '{{JOB_NAME}}',
     cluster = '{{DC}}',
     role = '{{RUN_ROLE}}',
     environment = '{{ENVIRON}}',
     production = '{{ISPRODUCTION}}',
     service = True, task = instance_task, instances = '{{NUM_SHARDS}}',
     announce = Announcer(primary_port = 'http'))
  ]
